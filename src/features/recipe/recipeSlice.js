import { createSlice } from "@reduxjs/toolkit";
import { createAsyncThunk } from "@reduxjs/toolkit";
import axios from "axios";

// api configuration 
const app_id = '716b11be'
const app_key = '9abd4aeb0e467e35e9efce77856643e7'

// initial state
const initialState = {
    loading: false,
    recipes: [],
    recipesExist: false,
    error: ''
}

// generates pending, fulfilled, and rejected action types
export const fetchRecipes = createAsyncThunk('recipe/fetchRecipes', (qf)=>{//qf is the an object holding the query and filter
    // generate api end point
    let endPoint = `https://api.edamam.com/api/recipes/v2?type=public&q=${qf.query}&app_id=${app_id}&app_key=${app_key}`

    // adding diet filters if they're set
    if(qf.filter.diet.length > 0){
        qf.filter.diet.forEach(fltr => {
            endPoint += `&diet=${fltr}`
        });
    }

    // adding health filters if they're set
    if(qf.filter.health.length > 0){
        qf.filter.health.forEach(fltr => {
            endPoint += `&health=${fltr}`
        });
    }

    // adding cuisine filters if they're set
    if(qf.filter.cuisineType.length > 0){
        qf.filter.cuisineType.forEach(fltr => {
            endPoint += `&cuisineType=${fltr}`
        });
    }

    // sending request
    return axios.get(endPoint)
    .then(response => response.data)
})

// recipe slice 
// the reducers are not generated by the slice and have to be added as extra reducers
const recipeSlice = createSlice(
    {
        name: 'recipe',
        initialState, 
        extraReducers: builder => {
            builder.addCase(fetchRecipes.pending, (state) => {
                state.loading = true
                state.recipes = []
                state.recipesExist = false
                state.error = ''
            })
            builder.addCase(fetchRecipes.fulfilled, (state, action) => {
                state.loading = false
                state.recipes = action.payload
                state.recipesExist = true
                state.error = ''
            })
            builder.addCase(fetchRecipes.rejected, (state, action)=>{
                state.loading = false
                state.recipes = []
                state.recipesExist = false
                state.error = action.error.message
            })
        }
    }
)

export default recipeSlice.reducer;